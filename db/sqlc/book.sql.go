// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
  title,
  author,
  price,
  description,
  cover_image_url,
  published_date,
  user_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, title, author, price, description, cover_image_url, published_date, user_id, updated_at, created_at
`

type CreateBookParams struct {
	Title         string      `json:"title"`
	Author        string      `json:"author"`
	Price         int64       `json:"price"`
	Description   string      `json:"description"`
	CoverImageUrl string      `json:"cover_image_url"`
	PublishedDate time.Time   `json:"published_date"`
	UserID        pgtype.Int8 `json:"user_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Price,
		arg.Description,
		arg.CoverImageUrl,
		arg.PublishedDate,
		arg.UserID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Price,
		&i.Description,
		&i.CoverImageUrl,
		&i.PublishedDate,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, price, description, cover_image_url, published_date, user_id, updated_at, created_at FROM books
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Price,
		&i.Description,
		&i.CoverImageUrl,
		&i.PublishedDate,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author, price, description, cover_image_url, published_date, user_id, updated_at, created_at FROM books
WHERE author = $1
ORDER BY published_date
LIMIT $2
OFFSET $3
`

type ListBooksParams struct {
	Author string `json:"author"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListBooks(ctx context.Context, arg ListBooksParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, listBooks, arg.Author, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Price,
			&i.Description,
			&i.CoverImageUrl,
			&i.PublishedDate,
			&i.UserID,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET
  title = COALESCE($1, title),
  author = COALESCE($2, author),
  price = COALESCE($3, price),
  description = COALESCE($4, description),
  cover_image_url = COALESCE($5, cover_image_url),
  published_date = COALESCE($6, published_date)
WHERE id = $7
RETURNING id, title, author, price, description, cover_image_url, published_date, user_id, updated_at, created_at
`

type UpdateBookParams struct {
	Title         pgtype.Text        `json:"title"`
	Author        pgtype.Text        `json:"author"`
	Price         pgtype.Int8        `json:"price"`
	Description   pgtype.Text        `json:"description"`
	CoverImageUrl pgtype.Text        `json:"cover_image_url"`
	PublishedDate pgtype.Timestamptz `json:"published_date"`
	ID            int64              `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.Title,
		arg.Author,
		arg.Price,
		arg.Description,
		arg.CoverImageUrl,
		arg.PublishedDate,
		arg.ID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Price,
		&i.Description,
		&i.CoverImageUrl,
		&i.PublishedDate,
		&i.UserID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
