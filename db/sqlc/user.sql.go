// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,
  hashed_password,
  email,
  role
) VALUES (
  $1, $2, $3, $4
) RETURNING id, name, hashed_password, email, role, updated_at, created_at
`

type CreateUserParams struct {
	Name           string `json:"name"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
	Role           string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.HashedPassword,
		arg.Email,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashedPassword,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, hashed_password, email, role, updated_at, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashedPassword,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, hashed_password, email, role, updated_at, created_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashedPassword,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, hashed_password, email, role, updated_at, created_at FROM users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashedPassword,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  name = COALESCE($1, name),
  hashed_password = COALESCE($2, hashed_password),
  updated_at = COALESCE($3, updated_at),
  role = COALESCE($4, role),
  email = COALESCE($5, email)
WHERE id = $6
RETURNING id, name, hashed_password, email, role, updated_at, created_at
`

type UpdateUserParams struct {
	Name           pgtype.Text        `json:"name"`
	HashedPassword pgtype.Text        `json:"hashed_password"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	Role           pgtype.Text        `json:"role"`
	Email          pgtype.Text        `json:"email"`
	ID             int64              `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.HashedPassword,
		arg.UpdatedAt,
		arg.Role,
		arg.Email,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HashedPassword,
		&i.Email,
		&i.Role,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
